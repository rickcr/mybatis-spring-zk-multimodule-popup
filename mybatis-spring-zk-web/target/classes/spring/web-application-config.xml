<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	   xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">


	<context:property-placeholder location="classpath:web-application.properties" ignore-resource-not-found="true" ignore-unresolvable="true"/>

	<context:component-scan base-package="net.learntechnology.empmaint.viewmodel"/>

	<!--
	Example defining an external datasource that would have properties
	populated when maven runs filter
	If for example running HSQL as separate process:

	<bean id="empDS" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbc.JDBCDriver"/>
		<property name="url" value="jdbc:hsqldb:hsql://localhost/empdb"/>
		<property name="username" value="SA"/>
		<property name="password" value=""/>
	</bean>
	-->

	<!-- for simplicity in this demo using an embedded HSQL datasource -->
	<jdbc:embedded-database id="empDS" type="HSQL">
		<jdbc:script location="classpath:/db.script" />
	</jdbc:embedded-database>

	<import resource="classpath:spring/services-config.xml"/>

</beans>
